name: Build image

on:
  push:
    branches:
      - master
      - develop
    tags:
      - v*

env:
  IMAGE_NAME: sc-actions-client

jobs:
  lint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 14.x ]

    steps:
      - uses: actions/checkout@v2

      - name: Install modules
        run: yarn
        
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Run ESLint
        run: yarn lint:js

      - name: Run StyleLint
        run: yarn lint:styles

  build-and-push:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          TAG=$(echo $GITHUB_SHA | head -c7)
          echo IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo ::set-output name=tagged_image::ghcr.io/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')/$IMAGE_NAME
          echo ::set-output name=tag::${TAG}
      - name: Set up Docker Buildx
        id: buildx
        # Use the action from the master, as we've seen some inconsistencies with @v1
        # Issue: https://github.com/docker/build-push-action/issues/286
        uses: docker/setup-buildx-action@master
        # Only worked for us with this option on ü§∑‚Äç‚ôÇÔ∏è
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-multi-buildx

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Build image and push
        uses: docker/build-push-action@v2
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: Dockerfile
          # Set the desired build target here
          target: production
          push: true
          tags: |
            ${{ steps.prep.outputs.tagged_image }}:${{ steps.prep.outputs.tag }}
            ${{ steps.prep.outputs.tagged_image }}:${{ steps.extract_branch.outputs.branch }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy-to-do:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v2

      - name: Deploy to Digital Ocean droplet via SSH
        if: github.ref == 'refs/heads/master'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: |
            cd ./sc-actions/
            docker-compose stop
            docker pull ghcr.io/smart-chef-dev/sc-actions-client/sc-actions-client:master
            docker-compose up -d

      - name: Deploy to Digital Ocean develop droplet via SSH
        if: github.ref == 'refs/heads/develop'
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME_DEV }}
          password: ${{ secrets.PASSWORD_DEV }}
          port: ${{ secrets.PORT_DEV }}
          script: |
            cd ./sc-actions/
            docker-compose stop
            docker pull ghcr.io/smart-chef-dev/sc-actions-client/sc-actions-client:develop
            docker-compose up -d
